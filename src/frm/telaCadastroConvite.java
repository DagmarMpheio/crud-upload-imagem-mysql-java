/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frm;

import conn.ConexaoBD;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import model.bean.Convite;
import model.dao.ConviteDao;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author dagma
 */
public class telaCadastroConvite extends javax.swing.JInternalFrame {

    /**
     * Creates new form telaCadstroConvite
     */
    private Connection conn = new ConexaoBD().getConnection();
    JFileChooser fileChooser;

    public telaCadastroConvite() {

        initComponents();
        try {
            MaskFormatter mask = new MaskFormatter("##/##/####");
            MaskFormatter mask2 = new MaskFormatter("##:##:##");
            txtConviteData.setFormatterFactory(new DefaultFormatterFactory(mask));
            txtConviteHora.setFormatterFactory(new DefaultFormatterFactory(mask2));
        } catch (ParseException ex) {
            throw new RuntimeException();
        }
        tabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtClieCod = new javax.swing.JTextField();
        txtConviteNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtConviteLocalActividade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbConvite = new javax.swing.JTable();
        txtCliePes = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnEscolherFoto = new javax.swing.JButton();
        lblResultFoto = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblMotrarFoto = new javax.swing.JLabel();
        lblNomeFoto = new javax.swing.JLabel();
        txtConviteData = new javax.swing.JFormattedTextField();
        txtConviteHora = new javax.swing.JFormattedTextField();
        btnConfirmarConvite = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Clientes");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204))), "Novo Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dubai Medium", 1, 14), new java.awt.Color(0, 102, 255))); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(92767, 92767));

        jLabel1.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel1.setText("Código");

        txtClieCod.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        txtClieCod.setEnabled(false);
        txtClieCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClieCodActionPerformed(evt);
            }
        });

        txtConviteNome.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        txtConviteNome.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel3.setText("Data");

        jLabel4.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel4.setText("Local da Actividade");

        txtConviteLocalActividade.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        txtConviteLocalActividade.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel5.setText("Foto");

        tbConvite.setFont(new java.awt.Font("Dubai Medium", 0, 12)); // NOI18N
        tbConvite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Local", "Data", "Hora", "Convidado?", "Foto"
            }
        ));
        tbConvite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbConviteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbConvite);

        txtCliePes.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        txtCliePes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCliePesKeyReleased(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("Excluir Convite");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAlterar.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.setToolTipText("Alterar Convite");
        btnAlterar.setEnabled(false);
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnNovo.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setToolTipText("Novo Convite");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar Convite");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel7.setLabelFor(txtConviteNome);
        jLabel7.setText("Nome do Convidado");

        jLabel8.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel8.setText("Convites: ");

        btnEscolherFoto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnEscolherFoto.setText("Escolher Foto");
        btnEscolherFoto.setEnabled(false);
        btnEscolherFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscolherFotoActionPerformed(evt);
            }
        });

        lblResultFoto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblResultFoto.setText("sem foto selecionada...");
        lblResultFoto.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabel6.setText("Hora");

        lblMotrarFoto.setText("sem foto");

        lblNomeFoto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblNomeFoto.setText("Nome do Novo Ficheiro");
        lblNomeFoto.setEnabled(false);

        txtConviteData.setEnabled(false);

        txtConviteHora.setEnabled(false);

        btnConfirmarConvite.setText("Confirmar Convite");
        btnConfirmarConvite.setToolTipText("Confirmar convite");
        btnConfirmarConvite.setEnabled(false);
        btnConfirmarConvite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarConviteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(79, 79, 79)
                .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCliePes))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClieCod)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtConviteData))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtConviteHora)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEscolherFoto)
                        .addGap(18, 18, 18)
                        .addComponent(lblResultFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNomeFoto)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnConfirmarConvite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(74, 74, 74)))
                        .addGap(198, 198, 198)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtConviteLocalActividade)
                    .addComponent(txtConviteNome)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblMotrarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtConviteNome)
                    .addComponent(txtClieCod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtConviteLocalActividade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConviteData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(txtConviteHora, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEscolherFoto)
                            .addComponent(lblResultFoto))
                        .addGap(18, 18, 18)
                        .addComponent(lblNomeFoto)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirmarConvite, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMotrarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCliePes)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtClieCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClieCodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClieCodActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        btnNovo.setEnabled(!true);
        btnGuardar.setEnabled(true);
        btnCancelar.setEnabled(true);
        btnEscolherFoto.setEnabled(true);
        txtClieCod.setText("");
        txtConviteNome.setEnabled(true);
        txtConviteNome.setText("");
        txtConviteData.setEnabled(true);
        txtConviteData.setText("");
        txtConviteHora.setEnabled(true);
        txtConviteHora.setText("");
        txtConviteLocalActividade.setEnabled(true);
        txtConviteLocalActividade.setText("");
        tbConvite.setEnabled(true);
        btnAlterar.setEnabled(!true);
        btnEliminar.setEnabled(!true);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        btnGuardar.setEnabled(!true);
        btnNovo.setEnabled(true);
        btnCancelar.setEnabled(false);
        btnAlterar.setEnabled(true);
        btnEliminar.setEnabled(true);
        txtCliePes.setEnabled(true);

        if (!"".equals(txtConviteNome.getText()) && !"".equals(txtConviteData.getText())
                && !"".equals(txtConviteHora.getText()) && !"".equals(txtConviteLocalActividade.getText())
                && !"".equals(lblResultFoto.getText())) {
            Convite c = new Convite();
            ConviteDao dao = new ConviteDao();
            c.setNome(txtConviteNome.getText());
            c.setLocalActvidade(txtConviteLocalActividade.getText());
            c.setData(txtConviteData.getText());
            c.setHora(txtConviteHora.getText());
            c.setVerificado(false);
            c.setFoto(lblNomeFoto.getText());
            dao.adicionar(c);
            tabela();

            /*limpar os campos*/
            txtConviteNome.setText("");
            txtConviteLocalActividade.setText("");
            txtConviteData.setText("");
            txtConviteHora.setText("");
            lblMotrarFoto.setText("sem foto");
            lblMotrarFoto.setIcon(null);
            lblResultFoto.setText("sem foto selecionada...");
            lblNomeFoto.setText("Nome do Novo Ficheiro");

        } else {
            JOptionPane.showMessageDialog(null, "Preencha os campos vazios!".toUpperCase());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        int linha = tbConvite.getSelectedRow();
        Convite c = new Convite();
        ConviteDao dao = new ConviteDao();
        if (linha != -1) {
            c.setNome(txtConviteNome.getText());
            c.setLocalActvidade(txtConviteLocalActividade.getText());
            c.setData(txtConviteData.getText());
            c.setHora(txtConviteHora.getText());
            c.setIdConvite((long) tbConvite.getValueAt(linha, 0));
            dao.alterar(c);
            tabela();
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int linha = tbConvite.getSelectedRow();
        Convite c = new Convite();
        ConviteDao dao = new ConviteDao();
        if (linha != -1) {
            c.setIdConvite((long) tbConvite.getValueAt(linha, 0));
            dao.apagar(c);
            tabela();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int fechar = JOptionPane.showConfirmDialog(null, "Tem a certeza que deseja cancelar?".toUpperCase(), "Cancelar Cadastro".toUpperCase(), JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == fechar) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void tbConviteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbConviteMouseClicked
        btnAlterar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnCancelar.setEnabled(!true);
        btnNovo.setEnabled(true);
        tbConvite.setEnabled(true);

        btnConfirmarConvite.setEnabled(true);

        int linha = tbConvite.getSelectedRow();
        if (linha != -1) {
            txtConviteNome.setEnabled(true);
            txtConviteData.setEnabled(true);
            txtConviteHora.setEnabled(true);
            txtConviteLocalActividade.setEnabled(true);
            txtClieCod.setText(tbConvite.getValueAt(linha, 0).toString());
            txtConviteNome.setText(tbConvite.getValueAt(linha, 1).toString());
            txtConviteLocalActividade.setText(tbConvite.getValueAt(linha, 2).toString());
            txtConviteData.setText(tbConvite.getValueAt(linha, 3).toString());
            txtConviteHora.setText(tbConvite.getValueAt(linha, 4).toString());

            /*mostrar imagem*/
            int largura = 375;
            int altura = 188;
            BufferedImage image = null;
            File f = null;

            /*carregar imagem*/
            try {
                String caminhoImagens = "upload_image";
                f = new File(caminhoImagens + "/" + tbConvite.getValueAt(linha, 6).toString());

                image = new BufferedImage(largura, altura, BufferedImage.TYPE_INT_ARGB);
                image = ImageIO.read(f);

                /*permitir a visualizacao da foto*/
                ImageIcon icon = new ImageIcon(image);
                lblMotrarFoto.setIcon(icon);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar a imagem\nerro:" + ex);
            }

        }
    }//GEN-LAST:event_tbConviteMouseClicked

    private void txtCliePesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCliePesKeyReleased
        pesquisar();
    }//GEN-LAST:event_txtCliePesKeyReleased

    private void btnEscolherFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscolherFotoActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new ImageFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);//nao aceita qualquer tipo de extensao

        int opcao = fileChooser.showOpenDialog(this);//abrir uma caixa de dialogo para escolher uma foto
        /*se selecionar uma foto, mostra o seu nome*/

        if (opcao == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fileChooser.getSelectedFile();
                String fileName = file.getAbsolutePath();
                /*mostrar o caminho e a foto escolhida*/
                lblResultFoto.setText("Ficheiro seleccionado: " + fileName);
                ImageIcon icon = new ImageIcon(fileName);
                lblMotrarFoto.setText("");
                lblMotrarFoto.setIcon(icon);

                /*upload da imagem*/
                String caminhoSalvarImagem = "upload_image";
                File directorio = new File(caminhoSalvarImagem);
                /*se o directorio nao existe, criar*/
                if (!directorio.exists()) {
                    directorio.mkdir();
                }

                File fonteFile = null;
                File destinoFile = null;

                Random rand = new Random();
                String nomeAleatorio = "" + rand.nextInt(1234567890);

                String extensao = fileName.substring(fileName.lastIndexOf('.') + 1);
                fonteFile = new File(fileName);
                destinoFile = new File(caminhoSalvarImagem + "/" + nomeAleatorio + "." + extensao);

                lblNomeFoto.setText(nomeAleatorio + "." + extensao);

                /*copiar a imagem para outro destino*/
                Files.copy(fonteFile.toPath(), destinoFile.toPath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "erro ao fazer o upload da imagem");
            }

        } else {
            lblResultFoto.setText("Cancelado...");
        }
    }//GEN-LAST:event_btnEscolherFotoActionPerformed

    private void btnConfirmarConviteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarConviteActionPerformed
        // TODO add your handling code here:
        int linha = tbConvite.getSelectedRow();
        Convite c = new Convite();
        ConviteDao dao = new ConviteDao();
        if (linha != -1) {
            c.setVerificado(true);
            c.setIdConvite((long) tbConvite.getValueAt(linha, 0));
            dao.confirmarConvite(c);
            tabela();
        }
    }//GEN-LAST:event_btnConfirmarConviteActionPerformed

    public void tabela() {
        DefaultTableModel modelo = (DefaultTableModel) tbConvite.getModel();
        modelo.setNumRows(0);
        ConviteDao dao = new ConviteDao();
        for (Convite c : dao.listarDados()) {
            modelo.addRow(new Object[]{
                c.getIdConvite(),
                c.getNome(),
                c.getLocalActvidade(),
                c.getData(),
                c.getHora(),
                c.isVerificado(),
                c.getFoto()
            });
        }
    }
    //pesquisar dados

    public void pesquisar() {
        String sql = "select * from convites where nome like?";
        try {
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, "%" + txtCliePes.getText() + "%");
            ResultSet rs = stmt.executeQuery();
            tbConvite.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro: ".toUpperCase() + ex);
        }
    }

    //classe para extensao de fotos
    class ImageFilter extends FileFilter {

        public final static String JPEG = "jpeg";
        public final static String JPG = "jpg";
        public final static String GIF = "gif";
        public final static String TIFF = "tiff";
        public final static String TIF = "tif";
        public final static String PNG = "png";

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String extensao = getExtension(f);
            if (extensao != null) {
                if (extensao.equals(TIFF)
                        || extensao.equals(TIF)
                        || extensao.equals(GIF)
                        || extensao.equals(JPEG)
                        || extensao.equals(JPG)
                        || extensao.equals(PNG)) {

                    return true;

                } else {
                    return false;
                }
            }

            return false;
        }

        @Override
        public String getDescription() {
            return "Apenas Imagem";
        }

        private String getExtension(File f) {
            String ext = null;
            String s = f.getName();
            int i = s.lastIndexOf('.');

            if (i > 0 && i < s.length() - 1) {
                ext = s.substring(i + 1).toLowerCase();
            }

            return ext;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmarConvite;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEscolherFoto;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMotrarFoto;
    private javax.swing.JLabel lblNomeFoto;
    private javax.swing.JLabel lblResultFoto;
    private javax.swing.JTable tbConvite;
    private javax.swing.JTextField txtClieCod;
    private javax.swing.JTextField txtCliePes;
    private javax.swing.JFormattedTextField txtConviteData;
    private javax.swing.JFormattedTextField txtConviteHora;
    private javax.swing.JTextField txtConviteLocalActividade;
    private javax.swing.JTextField txtConviteNome;
    // End of variables declaration//GEN-END:variables
}
